# -*- coding: utf-8 -*-
"""Image processing Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NUXxgFgRjojAjTcfjnwCpHvlMWHl29c2
"""

import os
import cv2
from google.colab.patches import cv2_imshow
import numpy as np
#for accessing files in a folder
paths, dir, files = next(os.walk("/content/images"))
file_count = len(files)
print(file_count)
print(files)

directorypath = "/content/images"

#for printing the images in the folder
for i in (files):
  image = cv2.imread(directorypath + '/' + i)
  cv2_imshow(image)
  print('\n') 

#applying negative image filter to all images
n=1
for i in (files):
  pic = cv2.imread(directorypath + '/' + i)
  #subtract the img from max value (calculated from datatype)
  img_neg=255-pic
  #show the image
  cv2_imshow(img_neg)
  #saving negative images in new folder
  imagename=n
  cv2.imwrite("/content/negative_img"+ '/' + str(imagename)+'.png',img_neg)
  n=n+1

import os
import cv2
from google.colab.patches import cv2_imshow
import numpy as np
#for accessing files in a folder
paths, dir, files = next(os.walk("/content/images"))

directorypath = "/content/images"

#for printing the images in the folder
for i in (files):
  image = cv2.imread(directorypath + '/' + i)
  cv2_imshow(image)
  print('\n') 

#contrast stretching 
n=1
for i in (files):
  pic = cv2.imread(directorypath + '/' + i)
  #normalize float versions
  norm_img2=cv2.normalize(pic,None, alpha=0, beta=1.5, norm_type=cv2.NORM_MINMAX,dtype=cv2.CV_32F)
  
  #scale to unit8
  norm_img2=np.clip(norm_img2,0,1)
  norm_img2=(255*norm_img2)

  #write normalized output image 
  cv2.imwrite("i.jpg",norm_img2)
  #display input and output images
  print('original')
  cv2_imshow(img)
  print("enhanced image")
  cv2_imshow(norm_img2)
  #saving images in new folder
  imagename=n
  cv2.imwrite("/content/contrast"+ '/' + str(imagename)+'.png',img_neg)
  n=n+1

import os
import cv2
from google.colab.patches import cv2_imshow
from skimage import color 
from skimage import io 
from PIL import Image
import matplotlib.pyplot as plt

#for accessing files in a folder
paths, dir, files = next(os.walk("/content/pictures"))

#for printing the images in the folder
for i in (files):
  image = cv2.imread(directorypath + '/' + i)
  cv2_imshow(image)
  print('\n') 

#converting image to binary
for i in (files):
  image = cv2.imread(directorypath + '/' + i)
  ret, bw_img = cv2.threshold(image, 150, 255, cv2.THRESH_BINARY)
  cv2_imshow(bw_img)

#converting image to grescale
for i in (files):
  img=Image.open(directorypath + '/' + i)
  imgGray = img.convert('L')
  plt.imshow(imgGray)  
  plt.show()
  plt.imshow(np.array(imgGray),cmap='gray')
  plt.show()

##cropping Image 
for i in (files):
  pic=Image.open(directorypath + '/' + i)
  pic2=pic.crop((0,400,830,480))
  plt.imshow(pic2)  
  plt.show()


# SHOWING THE IMAGE HISTOGRAM   
for i in (files):
  image = cv2.imread(directorypath + '/' + i)
  histr = cv2.calcHist([image],[0],None,[256],[0,256])
  plt.plot(histr)
  plt.show()

#converting to grescale

import os
import cv2
from google.colab.patches import cv2_imshow
from skimage import color 
from skimage import io 
from PIL import Image
#for accessing files in a folder
paths, dir, files = next(os.walk("/content/pictures"))
#converting image to grescale

for i in (files):
  img=Image.open(directorypath + '/' + i)
  imgGray = img.convert('L')
  plt.imshow(imgGray)  
  plt.show()
  plt.imshow(np.array(imgGray),cmap='gray')
  plt.show()
  imagename=n
  imagename=n
  imgGray.save('/content/grescale'+ '/' + str(imagename)+'.png')
  n=n+1

from IPython.display import display, Math, Latex
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

img = Image.open('/content/pictures/a.jpg')

# display the image
plt.imshow(img, cmap='gray')

# convert our image into a numpy array
img = np.asarray(img)

# put pixels in a 1D array by flattening out img array
flat = img.flatten()

# show the histogram
plt.hist(flat, bins=50)

# create our own histogram function
def get_histogram(image, bins):
    # array with size of bins, set to zeros
    histogram = np.zeros(bins)
    
    # loop through pixels and sum up counts of pixels
    for pixel in image:
        histogram[pixel] += 1
    
    # return our final result
    return histogram

# execute our histogram function
hist = get_histogram(flat, 256)

# create our cumulative sum function
def cumsum(a):
    a = iter(a)
    b = [next(a)]
    for i in a:
        b.append(b[-1] + i)
    return np.array(b)

# execute the fn
cs = cumsum(hist)

# display the result
plt.plot(cs)

# numerator & denomenator
nj = (cs - cs.min()) * 255
N = cs.max() - cs.min()

# re-normalize the cumsum
cs = nj / N

# cast it back to uint8 since we can't use floating point values in images
cs = cs.astype('uint8')

plt.plot(cs)

# get the value from cumulative sum for every index in flat, and set that as img_new
img_new = cs[flat]

# put array back into original shape since we flattened it
img_new = np.reshape(img_new, img.shape)

# set up side-by-side image display
fig = plt.figure()
fig.set_figheight(15)
fig.set_figwidth(15)

fig.add_subplot(1,2,1)
plt.imshow(img, cmap='gray')

# display the new image
fig.add_subplot(1,2,2)
plt.imshow(img_new, cmap='gray')

plt.show(block=True)

"""Using OpenCV"""

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow

img = cv.imread('/content/i.jpg',0)
equ = cv.equalizeHist(img)
res = np.hstack((img,equ)) #stacking images side-by-side
cv2_imshow(res)
cv.imwrite('res.png',res)